// Swagger Petstore 1.0.0
// ---
// This file is automatically generated by openapi with preset effector-openapi-preset
// Do not edit this file directly. Instead open openapi config file and follow the link in "file"
import { createEffect } from 'effector-root';
import * as typed from 'typed-contracts';
import { fetchFx } from '../lib/fetch';

//#region prebuilt code
const custom = { any: (valueName: string, value: unknown): any => value };

export type GenericErrors =
  | {
      status: 'unexpected';
      error: Error;
    }
  | {
      status: 'unknown_status';
      error: { status: number; body: unknown };
    }
  | {
      status: 'validation_error';
      error: typed.ValidationError;
    };

type ErrorCodes =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 500
  | 501
  | 502
  | 503
  | 503
  | 505;
/**
 * @throws
 */
function parseByStatus<
  Variants extends string,
  Contracts extends Record<number, [Variants, typed.Contract<any>]>,
  Result extends {
    [Code in keyof Contracts]: Contracts[Code] extends [
      infer Status,
      typed.Contract<infer T>,
    ]
      ? { status: Status; answer: T }
      : never;
  }
>(
  name: string,
  response: { status: number; body?: unknown },
  contracts: Contracts,
): Result[Exclude<keyof Result, ErrorCodes>] {
  const contractObject = contracts[response.status];
  if (!contractObject) {
    throw {
      status: 'unknown_status',
      error: {
        status: response.status,
        body: response.body,
      },
    };
  }
  const [status, contract] = contractObject;
  const answer = contract(name, response.body);
  if (answer instanceof typed.ValidationError) {
    throw { status: 'validation_error', error: answer };
  }
  if (response.status >= 400) {
    throw { status, error: answer };
  }
  return { status, answer } as Result[Exclude<keyof Result, ErrorCodes>];
}

//#endregion prebuilt code

export const pet = typed.object({
  id: typed.number,
  name: typed.string,
  tag: typed.string.optional,
});
export type Pet = typed.Get<typeof pet>;

export const pets = typed.array(pet);
export type Pets = typed.Get<typeof pets>;

export const error = typed.object({
  code: typed.number,
  message: typed.string,
});
export type Error = typed.Get<typeof error>;

/* --- */
//#region listPets
export interface ListPets {
  query?: {
    /* How many items to return at one time (max 100) */
    limit?: number;
  };
}

/* A paged array of pets */
export const listPetsOk = pets;
export interface ListPetsDone {
  status: 'ok';
  answer: typed.Get<typeof listPetsOk>;
}
export type ListPetsFail = GenericErrors;
export const listPets = createEffect<ListPets, ListPetsDone, ListPetsFail>({
  async handler({ query }) {
    const name = 'listPets.body';
    const response = await fetchFx({
      path: '/pets',
      method: 'GET',
      query,
    });
    return parseByStatus(name, response, {
      200: ['ok', listPetsOk],
    });
  },
});
//#endregion listPets

/* --- */
//#region createPets
export interface CreatePets {}

/* Null response */
export const createPetsCreated = typed.nul;
export interface CreatePetsDone {
  status: 'created';
  answer: typed.Get<typeof createPetsCreated>;
}
export type CreatePetsFail = GenericErrors;
export const createPets = createEffect<
  CreatePets,
  CreatePetsDone,
  CreatePetsFail
>({
  async handler() {
    const name = 'createPets.body';
    const response = await fetchFx({
      path: '/pets',
      method: 'POST',
    });
    return parseByStatus(name, response, {
      201: ['created', createPetsCreated],
    });
  },
});
//#endregion createPets

/* --- */
//#region showPetById
export interface ShowPetById {
  path: {
    /* The id of the pet to retrieve */
    petId: string;
  };
}

/* Expected response to a valid request */
export const showPetByIdOk = pet;
export interface ShowPetByIdDone {
  status: 'ok';
  answer: typed.Get<typeof showPetByIdOk>;
}
export type ShowPetByIdFail = GenericErrors;
export const showPetById = createEffect<
  ShowPetById,
  ShowPetByIdDone,
  ShowPetByIdFail
>({
  async handler({ path }) {
    const name = 'showPetById.body';
    const response = await fetchFx({
      path: `/pets/${path.petId}`,
      method: 'GET',
    });
    return parseByStatus(name, response, {
      200: ['ok', showPetByIdOk],
    });
  },
});
//#endregion showPetById
